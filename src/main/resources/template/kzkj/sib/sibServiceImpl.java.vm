package com.ideal.hos.${cfg.modelName}.${cfg.childModelName}.${cfg.cgildPhth}.service${cfg.sonPath}.impl;


import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.hit.common.toolkit.common.Constant;
import com.hit.common.toolkit.util.InitBeanUtil;
import com.hit.common.toolkit.validator.Assert;
import com.hit.internal.deploy.security.ContextHolder;
import org.apache.commons.lang3.ObjectUtils;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.Collections;
import java.util.List;

/**
 * <p>
 * $!{table.comment} 服务实现类
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Service
public class I${entity}ServiceImpl extends ${superServiceImplClass}<${table.mapperName}, ${entity}DO> implements ${table.serviceName} {

    @Override
    public ${entity}VO save${entity}(${entity}Param ${table.entityPath}Param) {
        ${entity}RequestDTO ${table.entityPath}RequestDto = ${entity}Convert.INSTANCE.paramToRequestDto(${table.entityPath}Param);
        //校验数据
        InitBeanUtil.init(${table.entityPath}RequestDto, LocalDateTime.now(),ContextHolder.getUser(),Constant.CREATE);
        checkData(${table.entityPath}RequestDto);
        ${entity}DO ${table.entityPath}Do = ${entity}Convert.INSTANCE.dtoToDo(${table.entityPath}RequestDto);
        Assert.isTrue(save(${table.entityPath}Do),"新增失败！");
        ${entity}DTO ${table.entityPath}Dto = ${entity}Convert.INSTANCE.doToDto(${table.entityPath}Do);
        return ${entity}Convert.INSTANCE.dtoToVo(${table.entityPath}Dto);
    }
    @Override
    public Boolean saveBatch${entity}(List<${entity}Param> ${table.entityPath}ParamList) {
        List<${entity}RequestDTO> ${table.entityPath}RequestDtoList = ${entity}Convert.INSTANCE.paramToRequestDto(${table.entityPath}ParamList);
        InitBeanUtil.init(${table.entityPath}RequestDtoList, LocalDateTime.now(),ContextHolder.getUser(),Constant.CREATE);
        List<${entity}DO> ${table.entityPath}DoList = ${entity}Convert.INSTANCE.dtoToDo(${table.entityPath}RequestDtoList);
        Assert.isTrue(saveBatch(${table.entityPath}DoList),"新增失败！");
        return Boolean.TRUE;
    }

    @Override
    public ${entity}VO update${entity}ById(${entity}Param ${table.entityPath}Param) {
        ${entity}RequestDTO ${table.entityPath}RequestDto = ${entity}Convert.INSTANCE.paramToRequestDto(${table.entityPath}Param);
        InitBeanUtil.init(${table.entityPath}RequestDto, LocalDateTime.now(),ContextHolder.getUser(), Constant.UPDATE);
        ${entity}DO ${table.entityPath}Do = ${entity}Convert.INSTANCE.dtoToDo(${table.entityPath}RequestDto);
        baseMapper.update${entity}ById(${table.entityPath}Do);
        ${entity}DTO ${table.entityPath}Dto = ${entity}Convert.INSTANCE.doToDto(${table.entityPath}Do);
        return ${entity}Convert.INSTANCE.dtoToVo(${table.entityPath}Dto);
    }
    @Override
    public ${entity}VO saveOrUpdate${entity}(${entity}Param ${table.entityPath}Param) {
        Long id = ${table.entityPath}Param.getId();
        if (ObjectUtils.isEmpty(id)) {
            return save${entity}(${table.entityPath}Param);
        } else {
            return update${entity}ById(${table.entityPath}Param);
        }
    }

    @Override
    public Boolean deleteByIds(List<Long> ids) {
        LambdaUpdateWrapper<${entity}DO> wrapper = new LambdaUpdateWrapper<>();
        wrapper.in(${entity}DO::getId, ids)
                .set(${entity}DO::getIsDeleted, Boolean.TRUE)
                .set(${entity}DO::getUpdateBy, ContextHolder.getUser().getUserId())
                .set(${entity}DO::getUpdateTime, LocalDateTime.now());
        return update(wrapper);
    }

    @Override
    public ${entity}VO get${entity}VoById(${entity}Param ${table.entityPath}Param) {
        ${entity}DO ${table.entityPath}Do = getById(${table.entityPath}Param.getId());
        ${entity}DTO ${table.entityPath}Dto = ${entity}Convert.INSTANCE.doToDto(${table.entityPath}Do);
        return ${entity}Convert.INSTANCE.dtoToVo(${table.entityPath}Dto);
    }

    @Override
    public List<${entity}VO> findListByCondition(${entity}Param ${table.entityPath}Param) {
        ${entity}RequestDTO ${table.entityPath}RequestDto = ${entity}Convert.INSTANCE.paramToRequestDto(${table.entityPath}Param);
        ${table.entityPath}RequestDto.setOrgId(ContextHolder.getUser().getOrgId());
        QueryWrapper<${entity}DO> queryWrapper = new QueryWrapper<>();
        queryWrapper.lambda().eq(${entity}DO::getIsDeleted, Boolean.FALSE);
        queryWrapper.lambda().eq(${entity}DO::getOrgId, ContextHolder.getUser().getOrgId());
        List<${entity}DO> ${table.entityPath}DoList = baseMapper.selectList(queryWrapper);
        if (!ObjectUtils.isEmpty(${table.entityPath}DoList)) {
            return ${entity}Convert.INSTANCE.dtoToVo(${entity}Convert.INSTANCE.doToDto(${table.entityPath}DoList));
        }
        return Collections.emptyList();
    }

    @Override
    public CommonPage<${entity}VO> pageList(${entity}PageParam ${table.entityPath}PageParam) {
        ${entity}PageRequestDTO ${table.entityPath}PageRequestDto = ${entity}Convert.INSTANCE.pageParamToPageRequestDto(${table.entityPath}PageParam);
        ${table.entityPath}PageRequestDto.setOrgId(ContextHolder.getUser().getOrgId());
        IPage<${entity}DO> page = new Page<>(${table.entityPath}PageRequestDto.getPageNum(), ${table.entityPath}PageRequestDto.getPageSize());
        List<${entity}DO> ${table.entityPath}Dos = baseMapper.pageList(page, ${table.entityPath}PageRequestDto);
        List<${entity}DTO> ${table.entityPath}Dtos  = ${entity}Convert.INSTANCE.doToDto(${table.entityPath}Dos);
        return PageUtils.restPage(page, ${entity}Convert.INSTANCE.dtoToVo( ${table.entityPath}Dtos));
    }

    /**
     * 校验数据
     * @param ${table.entityPath}RequestDto
     */
    private void checkData(${entity}RequestDTO ${table.entityPath}RequestDto) {

    }
}
